# -*- coding: utf-8 -*-
"""Conv_MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18eME4pnSuFx-Omydiz3Z7gMcMMO3rx6L
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.models import Model
import random

np.random.seed(0)

(X_train, y_train), (X_test, y_test)= mnist.load_data()

print(X_train.shape)
print(X_test.shape)

assert(X_train.shape[0] == y_train.shape[0]), "The number of images is not equal to the number of labels."
assert(X_train.shape[1:] == (28,28)), "The dimensions of the images are not 28 x 28."
assert(X_test.shape[0] == y_test.shape[0]), "The number of images is not equal to the number of labels."
assert(X_test.shape[1:] == (28,28)), "The dimensions of the images are not 28 x 28."

num_of_samples=[]

cols = 5
num_classes = 10

fig, axs = plt.subplots(nrows=num_classes, ncols=cols, figsize=(5,10))
fig.tight_layout()

for i in range(cols):
    for j in range(num_classes):
      x_selected = X_train[y_train == j]
      axs[j][i].imshow(x_selected[random.randint(0,(len(x_selected) - 1)), :, :], cmap=plt.get_cmap('gray'))
      axs[j][i].axis("off")
      if i == 2:
        axs[j][i].set_title(str(j))
        num_of_samples.append(len(x_selected))

print(num_of_samples)
plt.figure(figsize=(12, 4))
plt.bar(range(0, num_classes), num_of_samples)
plt.title("Distribution of the train dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")
plt.show()

X_train = X_train.reshape(60000, 28, 28, 1)
X_test = X_test.reshape(10000, 28, 28, 1)

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

X_train = X_train/255
X_test = X_test/255

model  = Sequential()
model.add(Conv2D(filters= 30 , kernel_size= (5,5), activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(filters = 15, kernel_size=(3,3), activation = 'relu' ))
model.add(MaxPooling2D( pool_size = (2,2)))
model.add(Flatten())
model.add(Dense(units = 500, activation='relu'))
model.add(Dropout(.5))
model.add(Dense(units = 10, activation='softmax'))

model.compile(Adam(learning_rate= .01), loss= 'categorical_crossentropy', metrics = (["accuracy"] ))

h = model.fit(X_train, y_train, batch_size =400 , epochs = 10, verbose =1, validation_split= .1, shuffle=1 )

plt.plot(h.history["accuracy"])
plt.plot(h.history["val_accuracy"])
plt.xlabel("Epochs")
plt.ylabel("accuracy")
plt.legend(["accuracy", "val_accuracy"])

plt.plot(h.history["loss"])
plt.plot(h.history["val_loss"])
plt.xlabel("Epochs")
plt.ylabel("loss")
plt.legend(["loss", "val_loss/"])

from PIL import Image
import requests
import cv2

url ="https://printables.space/files/uploads/download-and-print/large-printable-numbers/3-a4-1200x1697.jpg"
r1 = requests.get(url, stream=True)
img = Image.open(r1.raw)
plt.imshow(img, cmap = plt.get_cmap("gray"))

img = np.array(img)
img = cv2.resize(img, (28,28))
img =cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img = cv2.bitwise_not(img)
plt.imshow(img, cmap = plt.get_cmap("gray"))
img =img / 255
img = img.reshape(1,28,28,1)
img.shape

np.argmax(model.predict(img))

score = model.evaluate(X_test,y_test)
print("error score is: ", score[0])
print("accuracy score is: ", score[1])

model.summary()

layer1 = Model(inputs = model.layers[0].input, outputs = model.layers[0].output )
layer2 = Model(inputs = model.layers[0].input, outputs =model.layers[2].output )

visual_layer1, visual_layer2 = layer1.predict(img) ,layer2.predict(img)

print(visual_layer1.shape)
print(visual_layer2.shape)

plt.figure(figsize = (10,10))
for i in range(30):
  plt.subplot(6, 5, i+1)
  plt.imshow(visual_layer1[0, :, :, i], cmap= plt.get_cmap("jet"))
  plt.axis("off")

plt.figure(figsize = (10,6))
for i in range(15):
  plt.subplot(5, 3, i+1)
  plt.imshow(visual_layer2[0, :, :, i], cmap= plt.get_cmap("jet"))
  plt.axis("off")

