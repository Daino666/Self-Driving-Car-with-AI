# -*- coding: utf-8 -*-
"""Multiclass_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jv9Na7A4pZylevtKmnJKowEdx5xamHlU
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Input
from tensorflow.keras.utils import to_categorical

no_pts = 600
centers = [[-1,1], [1,-1], [-1, -1], [1,1]]
X, y = datasets.make_blobs(n_samples= no_pts, random_state= 123, centers= centers, cluster_std= 0.4)

y_cat = to_categorical(y, 4)

plt.scatter(X[y==0, 0], X[y==0,1])
plt.scatter(X[y==1, 0], X[y==1,1])
plt.scatter(X[y==2, 0], X[y==2,1])
plt.scatter(X[y==3, 0], X[y==3,1])

model = Sequential()
model.add(Input(shape =(2,)))
model.add( Dense(units = 4 , activation="softmax") )

model.compile(Adam(learning_rate= .01), loss= 'categorical_crossentropy', metrics = ["accuracy"])

h= model.fit(X, y_cat , verbose = 1, batch_size=20 , epochs = 300)

plt.plot(h.history["accuracy"])
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend(["accuracy"])

plt.plot(h.history["loss"])
plt.xlabel("Epochs")
plt.ylabel("loss")
plt.legend(["loss"])

x_span = np.linspace(min(X[:, 0])-1, max(X[:, 0])+1)
y_span = np.linspace(min(X[:, 1])-1, max(X[:, 1])+1)

xx, yy = np.meshgrid(x_span, y_span)
xx_ ,yy_  = xx.ravel(), yy.ravel()

grid = np.c_[xx_,yy_]

predictions = np.argmax(model.predict(grid), axis =-1)


z = predictions.reshape(xx.shape)

plt.contourf(xx, yy, z)
plt.scatter(X[y==0, 0], X[y==0, 1])
plt.scatter(X[y==1, 0], X[y==1, 1])
plt.scatter(X[y==2, 0], X[y==2, 1])
plt.scatter(X[y==3, 0], X[y==3, 1])

plt.contourf(xx, yy, z)
plt.scatter(X[y==0, 0], X[y==0, 1])
plt.scatter(X[y==1, 0], X[y==1, 1])
plt.scatter(X[y==2, 0], X[y==2, 1])
plt.scatter(X[y==3, 0], X[y==3, 1])

point = np.array([[1, -2]])

prediction = np.argmax(model.predict(point), -1)


plt.plot([1], [-2], marker = 'o', markersize = 10 , color= 'red' )
print("preditiocn is ", prediction)

