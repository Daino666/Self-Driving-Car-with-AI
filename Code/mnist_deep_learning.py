# -*- coding: utf-8 -*-
"""MNIST Deep_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9dOACy3KXycOeOilLIvnqmsAYkLVo8c
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow.keras
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Input
import random

np.random.seed(0)

(X_train, Y_train), (X_test, Y_test) = mnist.load_data()
'''
this function imports 60,000 images to
training and 10,000 testing images
'''

print(X_train.shape)
print(X_test.shape)


'''
this 28*28 is the image pexels
'''

assert(X_train.shape[0]==Y_train.shape[0]), "Traning images does not equal Traning labels "
assert(X_test.shape[0] == Y_test.shape[0]), "Testing images does not equal Testing labels "
assert(X_train.shape[1:] == (28,28) ), "Trainign Photo doesnt have suffecient pexels  "
assert(X_test.shape[1:] == (28,28) ), "Tesing Photo doesnt have suffecient pexels"


'''
this function is used for giving an error if the condition wasnt satisfied
in order to not prcoeed in the neural netwrok with wrong data
'''

rows = 10
cols = 5

no_samples = []

fig , axs = plt.subplots(rows, cols, figsize =  (5,10) )
fig.tight_layout()

for i in range(rows):
  for j in range(cols):
    X_selected = X_train[Y_train==i ,: ,: ]
    axs[i][j].imshow(X_selected[random.randint(0, len(X_selected)-1), :, :], cmap = plt.get_cmap("gray"))
    axs[i][j].axis("off")

    if j == 2:
      axs[i][j].set_title(str(i))
      no_samples.append(len(X_selected))

print(no_samples)

plt.figure(figsize = (12,5))
plt.bar(range(0, rows), no_samples)
plt.title("Distribution of the training dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")

Y_train = to_categorical(Y_train , rows)
Y_test = to_categorical(Y_test , rows)

'Normalization'

X_train = X_train/ 255
X_test = X_test  /   255


'''
Don't run this cell again !!!!
'''

X_train = X_train.reshape(X_train.shape[0], (X_train.shape[1]*X_train.shape[2]))
print(X_train.shape)

X_test = X_test.reshape(X_test.shape[0], (X_test.shape[1]*X_test.shape[2]))
print(X_test.shape)

"""Implementing Deep Neural network"""

model = Sequential()
model.add( Input(shape= (784, )))
model.add( Dense( units = 10, activation="relu" ) )
model.add( Dense( units = 15, activation="relu" ) )
model.add( Dense( units = 10, activation="relu" ) )
model.add( Dense( units = rows, activation="softmax" ) )
model.compile(Adam(learning_rate=.01), loss = "categorical_crossentropy", metrics =["accuracy"])

print(model.summary())

h= model.fit(X_train, Y_train, validation_split = .1 ,batch_size= 200, epochs = 7, verbose =1, shuffle= "true" )

plt.plot(h.history['loss'])
plt.plot(h.history['val_loss'])
plt.legend(['loss', 'val_loss'])
plt.title('Loss')
plt.xlabel('epoch')

plt.plot(h.history['accuracy'])
plt.plot(h.history['val_accuracy'])
plt.legend(['accuracy', 'val_accuracy'])
plt.title('Accuracy')
plt.xlabel('epoch')

score = model.evaluate(X_test, Y_test, verbose=0)
print(type(score))
print('Test score:', score[0])
print('Test accuracy:', score[1])



import requests
from PIL import Image
import cv2

url = "https://colah.github.io/posts/2014-10-Visualizing-MNIST/img/mnist_pca/MNIST-p1815-4.png"

response = requests.get(url, stream = True)
print(response)
img = Image.open(response.raw)
arr_img = np.asarray(img)
print(arr_img.shape)
arr_img = cv2.bitwise_not(arr_img)
arr_img = cv2.resize(arr_img, (28,28))
arr_img = cv2.cvtColor(arr_img, cv2.COLOR_BGR2GRAY)
print(arr_img.shape)
plt.imshow(arr_img, cmap= plt.get_cmap("gray"))

arr_img= arr_img.reshape(1, 28*28)
print(arr_img.shape)
arr_img = arr_img/255

predcition = np.argmax(model.predict(arr_img))
print("prediction of the neural netwrok is :", predcition)

